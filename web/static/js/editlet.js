// Generated by LiveScript 1.3.1
var editlet, slice$ = [].slice;
editlet = function(opt){
  opt == null && (opt = {});
  return this;
};
editlet.prototype = import$(Object.create(Object.prototype), {
  on: function(n, cb){
    var ref$;
    return ((ref$ = !this.evtHandler
      ? this.evtHandler = {}
      : this.evtHandler)[n] || (ref$[n] = [])).push(cb);
  },
  fire: function(n){
    var v, i$, ref$, len$, cb, results$ = [];
    v = slice$.call(arguments, 1);
    for (i$ = 0, len$ = (ref$ = (this.evtHandler || {})[n] || []).length; i$ < len$; ++i$) {
      cb = ref$[i$];
      results$.push(cb.apply(this, v));
    }
    return results$;
  },
  set: function(){},
  get: function(){},
  config: function(){}
});
editlet.cm = function(opt){
  var cm, bbox, this$ = this;
  opt == null && (opt = {});
  this.opt = opt;
  this.root = typeof opt.root === 'string'
    ? document.querySelector(opt.root)
    : opt.root;
  this.cm = cm = CodeMirror(this.root, import$({
    mode: 'javascript',
    lineNumbers: true,
    theme: 'ayu-mirage',
    lineWrapping: true,
    keyMap: "default",
    showCursorWhenSelecting: true,
    viewportMargin: Infinity
  }, opt.cm || {}));
  bbox = this.root.getBoundingClientRect();
  cm.setSize(bbox.width, bbox.height);
  cm.setValue('123');
  cm.on('change', function(){
    return this$.fire('change');
  });
  return this;
};
editlet.cm.prototype = import$(Object.create(editlet.prototype), {
  set: function(it){
    return this.cm.setValue(it);
  },
  get: function(){
    return this.cm.getValue();
  },
  config: function(){}
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}